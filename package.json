{
  "name": "gulp-eco",
  "version": "0.0.2.1",
  "description": "Precompile ECO templates into JavaScript",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/easyPEP/gulp-eco"
  },
  "homepage": "https://github.com/easypep/gulp-eco",
  "bugs": "https://github.com/easypep/gulp-eco/issues",
  "readmeFilename": "README.md",
  "main": "index.js",
  "author": {
    "name": "Kalle Saas",
    "email": "kalle@easypep.de",
    "url": "http://easypep.de"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "scripts": {
    "test": "mocha"
  },
  "files": [
    "index.js"
  ],
  "keywords": [
    "gulpplugin",
    "gulpfriendly",
    "eco",
    "transform",
    "transformer",
    "template",
    "templates",
    "view",
    "views",
    "precompile",
    "compile"
  ],
  "dependencies": {
    "gulp-util": "^2.2.0",
    "through2": "^0.4.0",
    "eco": "~1.1.0-rc-3"
  },
  "devDependencies": {
    "mocha": "*"
  },
  "readme": "# [gulp](https://github.com/wearefractal/gulp)-ect\r\n\r\n> Gulp plugin to compile ect.js template engine\r\n\r\n## Install\r\n\r\nInstall with [npm](https://npmjs.org/package/gulp-mocha)\r\n\r\n```\r\nnpm install --save-dev gulp-ect\r\n```\r\n\r\n\r\n## Example\r\n\r\njs\r\n```js\r\nvar gulp = require('gulp');\r\nvar ect = require('ect');\r\n\r\ngulp.task('ect', function(){\r\n  gulp.src('./src/*.ect')\r\n      .pipe(ect())\r\n      .pipe(gulp.dest('./out'));\r\n});\r\n\r\ngulp.task('default', ['ect']);\r\n```\r\n\r\ncoffee\r\n```coffee\r\nect = require('ect')\r\ngulp.task 'ect', ->\r\n  gulp\r\n    .src('./src/*.ect')\r\n    .pipe(ect())\r\n    .pipe gulp.dest('./out')\r\n\r\ngulp.task 'default', ['ect']\r\n```\r\n\r\n## API\r\n\r\n### ect(options)\r\n\r\n\r\n#### options.ext\r\n\r\nType: `String`  \r\nDefault: `.ect`  \r\n\r\nThe extensions input files.\r\n\r\n\r\n#### options.outExt\r\n\r\nType: `String`  \r\nDefault: `.html`  \r\n\r\nThe extensions output files.\r\n\r\n#### options.data\r\n\r\nType: `Function or Object`  \r\nDefault: `{}`  \r\n\r\nThe template context data. \r\n\r\nIf a function is passed, use the format function(fileName,callback) and fire callback as callback(data):\r\n\r\n~~~js\r\n  gulp.src(['./src/*.ect', './src/inner/*.ect'])\r\n    .pipe(ect({data: function (filename, cb) {\r\n      cb({foo: \"bar\"});\r\n    }}))\r\n    .pipe(gulp.dest('./out'));\r\n~~~\r\n\r\n## License\r\n\r\nMIT Â© Vladislav Derjavin <dev@vld.me>\r\n",
  "_id": "gulp-eco@0.0.1",
  "dist": {
    "shasum": "3aa414213a366d69934d522a49e10eaf7e78157c"
  },
  "_from": "/Users/fluxsaas/Documents/rails_apps/STAFFOMATIC/public/frontend/node_modules/gulp-eco"
}
